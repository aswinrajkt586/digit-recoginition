# -*- coding: utf-8 -*-
"""Digit_Recognisation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TwzJAaOZOvAFgrUQB4SoiXOOQDNyFEoi

# Handwritten Digit Classification using Logistic Regression

## Project Overview
This project involves building a classification model to recognize handwritten digits using the load_digits dataset from Scikit-Learn. The dataset comprises 8x8 pixel grayscale images of digits (0-9) and is commonly used as a benchmark in machine learning. The aim of this project is to implement a logistic regression model, evaluate its performance, and visualize the results, providing insights into the classification process.

Dataset
Source: The dataset is loaded using the load_digits function from Scikit-Learn's datasets module.

Features: The dataset contains 64 features (pixel values) representing each image of the digit.

Target: The target variable consists of the corresponding digit labels (0-9) for each image.

# 1. Import Necessary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import load_digits
from sklearn import metrics

"""# 2. Load and Explore the Dataset
This loads the digits dataset from scikit-learn, which contains images of handwritten digits (0-9). Each image is represented as an 8x8 pixel array.
"""

digits = load_digits()
digits

"""digits.keys() - Used to Check the Key value in dataset"""

digits.keys()

"""Change to DataFrame"""

data = pd.DataFrame(digits.data,columns = digits.feature_names)

data['target'] = digits.target

data.head()

"""# 3. Data Preprocessing
Clean the dataset (handle missing values, remove outliers, etc.). For instance, if any columns have missing values, you can either fill them or drop those rows.



"""

data.isna().sum()

data.dtypes

data.info()

"""# 4. Visualizing the Data
In this step, we visualize the data to get an initial understanding of how the features are distributed
"""

plt.figure(figsize=(20,4))
plt.gray()
for i in range(5):
  plt.matshow(digits.images[i])

"""# 5. Feature Selection
Choose relevant features (independent variables) to predict house prices (target variable).
"""

x = data.drop(columns = 'target', axis =1)
y = data['target']

"""# 6. Train-Test Split
Split the data into training and testing sets to evaluate the model's performance.
"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = .2, random_state =1)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

"""# 7. Train the Linear Regression Model
Fit the model on the training data.
"""

model = LogisticRegression()
model.fit(x_train,y_train)

"""## 8. Make Predictions
Predict Digits data on the test data.
"""

y_pred = model.predict(x_test)

"""# 9. Evaluate the Model
Evaluate the performance of the model using metrics like Mean Squared Error (MSE) and RÂ² score.
"""

model.score(x_test,y_test)

cm = metrics.confusion_matrix(y_test,y_pred)

plt.figure(figsize=(10,10))
sns.heatmap(cm,annot=True)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
plt.show

"""# 10. Predictions:

The model is used to make predictions on the test set, and individual predictions can be visualized by allowing the user to input an index.
"""

number = int(input("enter your number"))

plt.figure(figsize=(10,8))
plt.gray()
plt.matshow(digits.images[number])